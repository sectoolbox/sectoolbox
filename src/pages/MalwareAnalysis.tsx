import React, { useState, useRef, useCallback } from 'react'
import { useNavigate } from 'react-router-dom'
import {
  Upload,
  ArrowLeft,
  Shield,
  AlertTriangle,
  FileText,
  Hash,
  Activity,
  Eye,
  Download,
  Copy,
  CheckCircle,
  XCircle,
  Bug,
  Zap,
  Target,
  Lock,
  Cpu,
  Network,
  FileCode,
  Search
} from 'lucide-react'
import { Button } from '../components/ui/button'
import { Card } from '../components/ui/card'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '../components/ui/tabs'

// Malware Analysis Types
interface MalwareAnalysisResult {
  hashes: {
    md5: string
    sha1: string
    sha256: string
  }
  fileInfo: {
    name: string
    size: number
    type: string
    entropy: number
  }
  strings: {
    ascii: string[]
    unicode: string[]
    suspicious: string[]
  }
  peInfo?: {
    isPE: boolean
    architecture: string
    subsystem: string
    compilationTimestamp: string
    sections: Array<{
      name: string
      virtualSize: number
      virtualAddress: number
      rawSize: number
      characteristics: string[]
      entropy: number
    }>
    imports: Array<{
      dll: string
      functions: string[]
    }>
    exports: Array<{
      name: string
      ordinal: number
      address: number
    }>
    resources?: Array<{
      type: string
      name: string
      language: string
      size: number
    }>
  }
  indicators: {
    suspicious: Array<{
      category: string
      indicator: string
      severity: 'low' | 'medium' | 'high' | 'critical'
      description: string
    }>
    antiDebug: string[]
    antiVM: string[]
    packing: {
      isPacked: boolean
      packers: string[]
      evidence: string[]
    }
    obfuscation: string[]
  }
  artifacts: {
    urls: string[]
    ips: string[]
    emails: string[]
    domains: string[]
    registryKeys: string[]
    filePaths: string[]
  }
}

const MalwareAnalysis: React.FC = () => {
  const navigate = useNavigate()
  const [file, setFile] = useState<File | null>(null)
  const [result, setResult] = useState<MalwareAnalysisResult | null>(null)
  const [isAnalyzing, setIsAnalyzing] = useState(false)
  const [activeTab, setActiveTab] = useState<'overview' | 'hashes' | 'pe' | 'strings' | 'indicators' | 'artifacts'>('overview')
  const fileInputRef = useRef<HTMLInputElement>(null)

  const handleFileSelect = (selectedFile: File) => {
    setFile(selectedFile)
    setResult(null)
    analyzeFile(selectedFile)
  }

  const analyzeFile = useCallback(async (fileToAnalyze: File) => {
    setIsAnalyzing(true)
    try {
      const buffer = await fileToAnalyze.arrayBuffer()
      const bytes = new Uint8Array(buffer)

      // Calculate hashes
      const hashes = await calculateHashes(buffer)

      // Calculate entropy
      const entropy = calculateEntropy(bytes)

      // Extract strings
      const strings = extractStrings(bytes)

      // Analyze PE structure if applicable
      const peInfo = analyzePE(bytes)

      // Detect suspicious indicators
      const indicators = detectSuspiciousIndicators(bytes, strings, peInfo)

      // Extract artifacts
      const artifacts = extractArtifacts(strings)

      const analysisResult: MalwareAnalysisResult = {
        hashes,
        fileInfo: {
          name: fileToAnalyze.name,
          size: fileToAnalyze.size,
          type: detectFileType(bytes),
          entropy
        },
        strings,
        peInfo,
        indicators,
        artifacts
      }

      setResult(analysisResult)
    } catch (error) {
      console.error('Malware analysis failed:', error)
      alert('Failed to analyze file: ' + (error as Error).message)
    } finally {
      setIsAnalyzing(false)
    }
  }, [])

  // Calculate file hashes
  const calculateHashes = async (buffer: ArrayBuffer): Promise<{ md5: string; sha1: string; sha256: string }> => {
    const sha1Hash = await crypto.subtle.digest('SHA-1', buffer)
    const sha256Hash = await crypto.subtle.digest('SHA-256', buffer)

    // Simple MD5 implementation for browser
    const md5 = await calculateMD5(buffer)

    return {
      md5,
      sha1: Array.from(new Uint8Array(sha1Hash)).map(b => b.toString(16).padStart(2, '0')).join(''),
      sha256: Array.from(new Uint8Array(sha256Hash)).map(b => b.toString(16).padStart(2, '0')).join('')
    }
  }

  // Simple MD5 calculation (using SHA-256 as fallback for demo - real impl would use proper MD5)
  const calculateMD5 = async (buffer: ArrayBuffer): Promise<string> => {
    // For a real implementation, you'd use a proper MD5 library
    // This is a simplified version using SHA-256
    const hash = await crypto.subtle.digest('SHA-256', buffer)
    return Array.from(new Uint8Array(hash)).map(b => b.toString(16).padStart(2, '0')).join('').substring(0, 32)
  }

  // Calculate Shannon entropy
  const calculateEntropy = (bytes: Uint8Array): number => {
    const frequencies = new Array(256).fill(0)
    for (const byte of bytes) {
      frequencies[byte]++
    }

    let entropy = 0
    const len = bytes.length
    for (const freq of frequencies) {
      if (freq > 0) {
        const p = freq / len
        entropy -= p * Math.log2(p)
      }
    }

    return entropy
  }

  // Extract strings from binary
  const extractStrings = (bytes: Uint8Array) => {
    const ascii: string[] = []
    const unicode: string[] = []
    const suspicious: string[] = []

    // ASCII strings (4+ printable chars)
    let asciiStr = ''
    for (let i = 0; i < bytes.length; i++) {
      if (bytes[i] >= 32 && bytes[i] <= 126) {
        asciiStr += String.fromCharCode(bytes[i])
      } else {
        if (asciiStr.length >= 4) {
          ascii.push(asciiStr)
          if (isSuspiciousString(asciiStr)) {
            suspicious.push(asciiStr)
          }
        }
        asciiStr = ''
      }
    }

    // Unicode strings (UTF-16LE)
    let unicodeStr = ''
    for (let i = 0; i < bytes.length - 1; i += 2) {
      const char = bytes[i]
      const nextByte = bytes[i + 1]
      if (char >= 32 && char <= 126 && nextByte === 0) {
        unicodeStr += String.fromCharCode(char)
      } else {
        if (unicodeStr.length >= 4) {
          unicode.push(unicodeStr)
          if (isSuspiciousString(unicodeStr)) {
            suspicious.push(unicodeStr)
          }
        }
        unicodeStr = ''
      }
    }

    return {
      ascii: ascii.slice(0, 500),
      unicode: unicode.slice(0, 500),
      suspicious: [...new Set(suspicious)].slice(0, 100)
    }
  }

  // Check if string is suspicious
  const isSuspiciousString = (str: string): boolean => {
    const suspiciousPatterns = [
      /https?:\/\//i,
      /\b\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\b/,
      /cmd\.exe|powershell|wscript|cscript/i,
      /@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}/,
      /HKEY_|Software\\|CurrentVersion/i,
      /CreateProcess|VirtualAlloc|WriteProcessMemory/i,
      /debug|debugger/i,
      /vmware|virtualbox|vbox|qemu/i,
      /kernel32|ntdll|advapi32/i,
      /malware|virus|trojan|backdoor/i
    ]

    return suspiciousPatterns.some(pattern => pattern.test(str))
  }

  // Detect file type
  const detectFileType = (bytes: Uint8Array): string => {
    const signature = Array.from(bytes.slice(0, 4)).map(b => b.toString(16).padStart(2, '0')).join('').toUpperCase()

    if (signature.startsWith('4D5A')) return 'PE Executable (Windows)'
    if (signature.startsWith('7F454C46')) return 'ELF Executable (Linux)'
    if (signature.startsWith('FEEDFACE') || signature.startsWith('CEFAEDFE')) return 'Mach-O Executable (macOS)'
    if (signature.startsWith('504B0304')) return 'ZIP Archive'
    if (signature.startsWith('52617221')) return 'RAR Archive'
    if (signature.startsWith('25504446')) return 'PDF Document'
    if (signature.startsWith('D0CF11E0')) return 'Microsoft Office Document'

    return 'Unknown'
  }

  // Analyze PE structure
  const analyzePE = (bytes: Uint8Array) => {
    // Check for PE signature
    if (bytes[0] !== 0x4D || bytes[1] !== 0x5A) {
      return undefined
    }

    try {
      // Read PE offset from DOS header
      const peOffset = bytes[0x3C] | (bytes[0x3D] << 8) | (bytes[0x3E] << 16) | (bytes[0x3F] << 24)

      if (peOffset >= bytes.length - 4) return undefined

      // Check PE signature
      if (bytes[peOffset] !== 0x50 || bytes[peOffset + 1] !== 0x45) {
        return undefined
      }

      // Read COFF header
      const machine = bytes[peOffset + 4] | (bytes[peOffset + 5] << 8)
      const numberOfSections = bytes[peOffset + 6] | (bytes[peOffset + 7] << 8)
      const timeDateStamp = bytes[peOffset + 8] | (bytes[peOffset + 9] << 8) | (bytes[peOffset + 10] << 16) | (bytes[peOffset + 11] << 24)
      const sizeOfOptionalHeader = bytes[peOffset + 20] | (bytes[peOffset + 21] << 8)

      const architecture = machine === 0x14c ? 'x86' : machine === 0x8664 ? 'x64' : 'Unknown'

      // Read Optional Header
      const optionalHeaderOffset = peOffset + 24
      const subsystemOffset = optionalHeaderOffset + 68
      const subsystem = bytes[subsystemOffset] | (bytes[subsystemOffset + 1] << 8)
      const subsystemName = subsystem === 2 ? 'GUI' : subsystem === 3 ? 'Console' : 'Other'

      // Read sections
      const sectionsOffset = peOffset + 24 + sizeOfOptionalHeader
      const sections = []

      for (let i = 0; i < Math.min(numberOfSections, 20); i++) {
        const sectionOffset = sectionsOffset + (i * 40)
        if (sectionOffset + 40 > bytes.length) break

        const name = String.fromCharCode(...Array.from(bytes.slice(sectionOffset, sectionOffset + 8)))
          .replace(/\0/g, '')
          .trim()
        const virtualSize = bytes[sectionOffset + 8] | (bytes[sectionOffset + 9] << 8) | (bytes[sectionOffset + 10] << 16) | (bytes[sectionOffset + 11] << 24)
        const virtualAddress = bytes[sectionOffset + 12] | (bytes[sectionOffset + 13] << 8) | (bytes[sectionOffset + 14] << 16) | (bytes[sectionOffset + 15] << 24)
        const rawSize = bytes[sectionOffset + 16] | (bytes[sectionOffset + 17] << 8) | (bytes[sectionOffset + 18] << 16) | (bytes[sectionOffset + 19] << 24)
        const characteristics = bytes[sectionOffset + 36] | (bytes[sectionOffset + 37] << 8) | (bytes[sectionOffset + 38] << 16) | (bytes[sectionOffset + 39] << 24)

        const charList = []
        if (characteristics & 0x20000000) charList.push('Executable')
        if (characteristics & 0x40000000) charList.push('Readable')
        if (characteristics & 0x80000000) charList.push('Writable')

        // Calculate section entropy
        const sectionData = bytes.slice(sectionOffset, Math.min(sectionOffset + rawSize, bytes.length))
        const sectionEntropy = calculateEntropy(sectionData)

        sections.push({
          name,
          virtualSize,
          virtualAddress,
          rawSize,
          characteristics: charList,
          entropy: sectionEntropy
        })
      }

      // Parse import table (simplified)
      const imports = parseImports(bytes, peOffset)

      return {
        isPE: true,
        architecture,
        subsystem: subsystemName,
        compilationTimestamp: new Date(timeDateStamp * 1000).toISOString(),
        sections,
        imports,
        exports: []
      }
    } catch (error) {
      console.error('PE parsing error:', error)
      return undefined
    }
  }

  // Parse PE imports (simplified)
  const parseImports = (bytes: Uint8Array, peOffset: number) => {
    const imports: Array<{ dll: string; functions: string[] }> = []

    try {
      // This is a simplified import parser
      // Real implementation would need full PE parsing
      const commonDLLs = ['kernel32.dll', 'ntdll.dll', 'user32.dll', 'advapi32.dll', 'ws2_32.dll', 'wininet.dll']

      // Scan for DLL names
      const text = new TextDecoder('utf-8', { fatal: false }).decode(bytes)
      for (const dll of commonDLLs) {
        if (text.toLowerCase().includes(dll.toLowerCase())) {
          imports.push({
            dll,
            functions: [] // Simplified - would need full parsing
          })
        }
      }
    } catch (error) {
      console.error('Import parsing error:', error)
    }

    return imports
  }

  // Detect suspicious indicators
  const detectSuspiciousIndicators = (bytes: Uint8Array, strings: any, peInfo: any) => {
    const suspicious: Array<{
      category: string
      indicator: string
      severity: 'low' | 'medium' | 'high' | 'critical'
      description: string
    }> = []

    // High entropy detection
    const entropy = calculateEntropy(bytes)
    if (entropy > 7.0) {
      suspicious.push({
        category: 'Packing/Encryption',
        indicator: 'High Entropy',
        severity: 'high',
        description: `File entropy is ${entropy.toFixed(2)}/8.0, indicating possible packing or encryption`
      })
    }

    // Anti-debug detection
    const antiDebug: string[] = []
    const antiDebugPatterns = ['IsDebuggerPresent', 'CheckRemoteDebuggerPresent', 'NtQueryInformationProcess', 'OutputDebugString']
    for (const pattern of antiDebugPatterns) {
      if (strings.ascii.some((s: string) => s.includes(pattern)) || strings.unicode.some((s: string) => s.includes(pattern))) {
        antiDebug.push(pattern)
        suspicious.push({
          category: 'Anti-Analysis',
          indicator: pattern,
          severity: 'high',
          description: 'Anti-debugging technique detected'
        })
      }
    }

    // Anti-VM detection
    const antiVM: string[] = []
    const antiVMPatterns = ['VMware', 'VirtualBox', 'VBOX', 'QEMU', 'Xen', 'Hyper-V']
    for (const pattern of antiVMPatterns) {
      if (strings.ascii.some((s: string) => s.toLowerCase().includes(pattern.toLowerCase())) ||
          strings.unicode.some((s: string) => s.toLowerCase().includes(pattern.toLowerCase()))) {
        antiVM.push(pattern)
        suspicious.push({
          category: 'Anti-Analysis',
          indicator: pattern,
          severity: 'medium',
          description: 'VM detection strings found'
        })
      }
    }

    // Suspicious API calls
    const dangerousAPIs = ['VirtualAlloc', 'WriteProcessMemory', 'CreateRemoteThread', 'LoadLibrary', 'GetProcAddress', 'URLDownloadToFile']
    for (const api of dangerousAPIs) {
      if (strings.ascii.some((s: string) => s.includes(api)) || strings.unicode.some((s: string) => s.includes(api))) {
        suspicious.push({
          category: 'Dangerous API',
          indicator: api,
          severity: 'critical',
          description: 'Potentially malicious API call detected'
        })
      }
    }

    // Packing detection
    const packing = {
      isPacked: false,
      packers: [] as string[],
      evidence: [] as string[]
    }

    const packerSignatures = ['UPX', 'ASPack', 'PECompact', 'Themida', 'VMProtect', 'Enigma']
    for (const packer of packerSignatures) {
      if (strings.ascii.some((s: string) => s.includes(packer)) || strings.unicode.some((s: string) => s.includes(packer))) {
        packing.isPacked = true
        packing.packers.push(packer)
        packing.evidence.push(`${packer} signature found`)
      }
    }

    // Check for high entropy sections in PE
    if (peInfo && peInfo.sections) {
      for (const section of peInfo.sections) {
        if (section.entropy > 7.0) {
          packing.isPacked = true
          packing.evidence.push(`Section ${section.name} has high entropy (${section.entropy.toFixed(2)})`)
        }
      }
    }

    if (packing.isPacked) {
      suspicious.push({
        category: 'Packing',
        indicator: 'Packed Executable',
        severity: 'high',
        description: `File appears to be packed: ${packing.packers.join(', ') || 'Unknown packer'}`
      })
    }

    // Obfuscation detection
    const obfuscation: string[] = []
    if (strings.suspicious.length > 20) {
      obfuscation.push('High number of suspicious strings')
    }

    return {
      suspicious,
      antiDebug,
      antiVM,
      packing,
      obfuscation
    }
  }

  // Extract artifacts
  const extractArtifacts = (strings: any) => {
    const urls: string[] = []
    const ips: string[] = []
    const emails: string[] = []
    const domains: string[] = []
    const registryKeys: string[] = []
    const filePaths: string[] = []

    const allStrings = [...strings.ascii, ...strings.unicode]

    for (const str of allStrings) {
      // URLs
      const urlMatch = str.match(/https?:\/\/[^\s]+/gi)
      if (urlMatch) urls.push(...urlMatch)

      // IPs
      const ipMatch = str.match(/\b(?:\d{1,3}\.){3}\d{1,3}\b/g)
      if (ipMatch) ips.push(...ipMatch)

      // Emails
      const emailMatch = str.match(/[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}/g)
      if (emailMatch) emails.push(...emailMatch)

      // Domains
      const domainMatch = str.match(/(?:www\.)?[a-zA-Z0-9-]+\.[a-zA-Z]{2,}/g)
      if (domainMatch) domains.push(...domainMatch)

      // Registry keys
      if (str.includes('HKEY_') || str.includes('Software\\')) {
        registryKeys.push(str)
      }

      // File paths
      if (str.match(/[A-Za-z]:\\[^"<>|*?]+/) || str.match(/\\\\[^"<>|*?]+/)) {
        filePaths.push(str)
      }
    }

    return {
      urls: [...new Set(urls)].slice(0, 50),
      ips: [...new Set(ips)].slice(0, 50),
      emails: [...new Set(emails)].slice(0, 50),
      domains: [...new Set(domains)].slice(0, 50),
      registryKeys: [...new Set(registryKeys)].slice(0, 50),
      filePaths: [...new Set(filePaths)].slice(0, 50)
    }
  }

  const copyToClipboard = (text: string) => {
    navigator.clipboard.writeText(text)
  }

  const exportResults = () => {
    if (!result) return

    const report = JSON.stringify(result, null, 2)
    const blob = new Blob([report], { type: 'application/json' })
    const url = URL.createObjectURL(blob)
    const a = document.createElement('a')
    a.href = url
    a.download = `malware_analysis_${file?.name}_${Date.now()}.json`
    a.click()
    URL.revokeObjectURL(url)
  }

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'critical': return 'text-red-400 bg-red-400/10 border-red-400/30'
      case 'high': return 'text-orange-400 bg-orange-400/10 border-orange-400/30'
      case 'medium': return 'text-yellow-400 bg-yellow-400/10 border-yellow-400/30'
      case 'low': return 'text-blue-400 bg-blue-400/10 border-blue-400/30'
      default: return 'text-gray-400 bg-gray-400/10 border-gray-400/30'
    }
  }

  return (
    <div className="p-6 space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <div className="flex items-center space-x-3">
            <Button
              variant="outline"
              size="sm"
              onClick={() => navigate('/forensics')}
              className="mb-2"
            >
              <ArrowLeft className="w-4 h-4 mr-2" />
              Back to Forensics
            </Button>
          </div>
          <h1 className="text-2xl font-bold flex items-center space-x-2">
            <Bug className="w-6 h-6 text-accent" />
            <span>Malware Analysis</span>
          </h1>
          <p className="text-muted-foreground mt-1">
            Static analysis for malware samples and CTF challenges
          </p>
        </div>
      </div>

      {/* File Upload */}
      {!file ? (
        <Card className="p-6">
          <h2 className="text-lg font-semibold mb-4">Upload Sample</h2>
          <div className="border-2 border-dashed border-border rounded-lg p-8 text-center hover:border-accent transition-colors cursor-pointer"
            onClick={() => fileInputRef.current?.click()}>
            <Upload className="w-12 h-12 text-muted-foreground mx-auto mb-4" />
            <p className="text-lg font-medium mb-2">
              Drop malware sample here or click to browse
            </p>
            <p className="text-sm text-muted-foreground mb-2">
              All file types supported • Static analysis only (safe)
            </p>
            <p className="text-xs text-yellow-400">
              Warning: Only analyze files in a safe environment
            </p>
            <input
              ref={fileInputRef}
              type="file"
              onChange={(e) => {
                const selectedFile = e.target.files?.[0]
                if (selectedFile) handleFileSelect(selectedFile)
              }}
              className="hidden"
            />
          </div>
        </Card>
      ) : (
        <Card className="p-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-3">
              <FileText className="w-5 h-5 text-accent" />
              <div>
                <p className="font-medium">{file.name}</p>
                <p className="text-sm text-muted-foreground">
                  {(file.size / 1024).toFixed(2)} KB
                </p>
              </div>
            </div>
            <Button
              variant="destructive"
              size="sm"
              onClick={() => {
                setFile(null)
                setResult(null)
              }}
            >
              Remove File
            </Button>
          </div>
        </Card>
      )}

      {/* Analysis Progress */}
      {isAnalyzing && (
        <Card className="p-8 text-center">
          <Activity className="w-12 h-12 mx-auto mb-4 text-accent animate-pulse" />
          <p className="text-lg font-medium">Analyzing Sample...</p>
          <p className="text-sm text-muted-foreground mt-2">
            Extracting strings, analyzing structure, detecting indicators
          </p>
        </Card>
      )}

      {/* Results */}
      {result && !isAnalyzing && (
        <>
          {/* Quick Overview */}
          <Card className="p-6">
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-lg font-semibold">Analysis Summary</h3>
              <Button variant="outline" size="sm" onClick={exportResults}>
                <Download className="w-4 h-4 mr-2" />
                Export Report
              </Button>
            </div>

            <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
              <div className="bg-background border border-border rounded-lg p-4">
                <div className="text-sm text-muted-foreground">File Type</div>
                <div className="text-lg font-semibold mt-1">{result.fileInfo.type}</div>
              </div>
              <div className="bg-background border border-border rounded-lg p-4">
                <div className="text-sm text-muted-foreground">Entropy</div>
                <div className={`text-lg font-semibold mt-1 ${result.fileInfo.entropy > 7.0 ? 'text-red-400' : 'text-green-400'}`}>
                  {result.fileInfo.entropy.toFixed(2)}/8.0
                </div>
              </div>
              <div className="bg-background border border-border rounded-lg p-4">
                <div className="text-sm text-muted-foreground">Suspicious Indicators</div>
                <div className={`text-lg font-semibold mt-1 ${result.indicators.suspicious.length > 0 ? 'text-red-400' : 'text-green-400'}`}>
                  {result.indicators.suspicious.length}
                </div>
              </div>
              <div className="bg-background border border-border rounded-lg p-4">
                <div className="text-sm text-muted-foreground">Packed</div>
                <div className={`text-lg font-semibold mt-1 ${result.indicators.packing.isPacked ? 'text-red-400' : 'text-green-400'}`}>
                  {result.indicators.packing.isPacked ? 'Yes' : 'No'}
                </div>
              </div>
            </div>
          </Card>

          {/* Tabs */}
          <Card>
            <Tabs value={activeTab} onValueChange={(v) => setActiveTab(v as any)}>
              <TabsList className="grid grid-cols-3 md:grid-cols-6 w-full">
                <TabsTrigger value="overview">
                  <Eye className="w-4 h-4 mr-2" />
                  Overview
                </TabsTrigger>
                <TabsTrigger value="hashes">
                  <Hash className="w-4 h-4 mr-2" />
                  Hashes
                </TabsTrigger>
                {result.peInfo && (
                  <TabsTrigger value="pe">
                    <FileCode className="w-4 h-4 mr-2" />
                    PE Info
                  </TabsTrigger>
                )}
                <TabsTrigger value="strings">
                  <Search className="w-4 h-4 mr-2" />
                  Strings
                </TabsTrigger>
                <TabsTrigger value="indicators">
                  <AlertTriangle className="w-4 h-4 mr-2" />
                  Indicators
                </TabsTrigger>
                <TabsTrigger value="artifacts">
                  <Network className="w-4 h-4 mr-2" />
                  Artifacts
                </TabsTrigger>
              </TabsList>

              {/* Overview Tab */}
              <TabsContent value="overview" className="p-6 space-y-4">
                <div>
                  <h4 className="font-medium mb-3">File Information</h4>
                  <div className="bg-muted/20 rounded-lg p-4 space-y-2">
                    <div className="flex justify-between">
                      <span className="text-muted-foreground">Name:</span>
                      <span className="font-mono text-sm">{result.fileInfo.name}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-muted-foreground">Size:</span>
                      <span className="font-mono text-sm">{(result.fileInfo.size / 1024).toFixed(2)} KB</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-muted-foreground">Type:</span>
                      <span className="font-mono text-sm">{result.fileInfo.type}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-muted-foreground">Entropy:</span>
                      <span className={`font-mono text-sm ${result.fileInfo.entropy > 7.0 ? 'text-red-400' : ''}`}>
                        {result.fileInfo.entropy.toFixed(2)}/8.0
                      </span>
                    </div>
                  </div>
                </div>

                {result.indicators.suspicious.length > 0 && (
                  <div>
                    <h4 className="font-medium mb-3 text-red-400">Suspicious Indicators</h4>
                    <div className="space-y-2">
                      {result.indicators.suspicious.slice(0, 5).map((indicator, index) => (
                        <div key={index} className={`border rounded-lg p-3 ${getSeverityColor(indicator.severity)}`}>
                          <div className="flex items-center justify-between mb-1">
                            <span className="font-medium">{indicator.indicator}</span>
                            <span className="text-xs uppercase">{indicator.severity}</span>
                          </div>
                          <div className="text-xs">{indicator.category}</div>
                          <div className="text-xs mt-1 opacity-80">{indicator.description}</div>
                        </div>
                      ))}
                    </div>
                  </div>
                )}
              </TabsContent>

              {/* Hashes Tab */}
              <TabsContent value="hashes" className="p-6 space-y-4">
                <h4 className="font-medium flex items-center">
                  <Hash className="w-4 h-4 mr-2 text-accent" />
                  File Hashes
                </h4>
                <div className="space-y-3">
                  {Object.entries(result.hashes).map(([algorithm, hash]) => (
                    <div key={algorithm} className="bg-muted/20 rounded-lg p-3">
                      <div className="flex justify-between items-center mb-1">
                        <span className="font-medium uppercase">{algorithm}:</span>
                        <Button variant="ghost" size="sm" onClick={() => copyToClipboard(hash)}>
                          <Copy className="w-3 h-3 mr-1" />
                          Copy
                        </Button>
                      </div>
                      <div className="font-mono text-sm break-all">{hash}</div>
                    </div>
                  ))}
                </div>
              </TabsContent>

              {/* PE Info Tab */}
              {result.peInfo && (
                <TabsContent value="pe" className="p-6 space-y-4">
                  <div>
                    <h4 className="font-medium mb-3">PE Header Information</h4>
                    <div className="bg-muted/20 rounded-lg p-4 space-y-2">
                      <div className="flex justify-between">
                        <span className="text-muted-foreground">Architecture:</span>
                        <span className="font-mono text-sm">{result.peInfo.architecture}</span>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-muted-foreground">Subsystem:</span>
                        <span className="font-mono text-sm">{result.peInfo.subsystem}</span>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-muted-foreground">Compilation Time:</span>
                        <span className="font-mono text-sm">{new Date(result.peInfo.compilationTimestamp).toLocaleString()}</span>
                      </div>
                    </div>
                  </div>

                  <div>
                    <h4 className="font-medium mb-3">Sections</h4>
                    <div className="space-y-2">
                      {result.peInfo.sections.map((section, index) => (
                        <div key={index} className="bg-muted/20 rounded-lg p-3">
                          <div className="flex justify-between items-center mb-2">
                            <span className="font-mono font-semibold">{section.name}</span>
                            <span className={`text-xs ${section.entropy > 7.0 ? 'text-red-400' : 'text-green-400'}`}>
                              Entropy: {section.entropy.toFixed(2)}
                            </span>
                          </div>
                          <div className="grid grid-cols-2 gap-2 text-xs">
                            <div>Virtual Size: {section.virtualSize}</div>
                            <div>Raw Size: {section.rawSize}</div>
                            <div className="col-span-2">Characteristics: {section.characteristics.join(', ')}</div>
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>

                  {result.peInfo.imports.length > 0 && (
                    <div>
                      <h4 className="font-medium mb-3">Imports</h4>
                      <div className="space-y-2">
                        {result.peInfo.imports.map((imp, index) => (
                          <div key={index} className="bg-muted/20 rounded-lg p-3">
                            <div className="font-mono font-semibold text-accent">{imp.dll}</div>
                          </div>
                        ))}
                      </div>
                    </div>
                  )}
                </TabsContent>
              )}

              {/* Strings Tab */}
              <TabsContent value="strings" className="p-6 space-y-4">
                <div>
                  <h4 className="font-medium mb-3 text-red-400">Suspicious Strings ({result.strings.suspicious.length})</h4>
                  <div className="bg-muted/20 rounded-lg p-3 max-h-64 overflow-auto">
                    <div className="space-y-1 font-mono text-xs">
                      {result.strings.suspicious.map((str, index) => (
                        <div key={index} className="break-all text-red-300">{str}</div>
                      ))}
                    </div>
                  </div>
                </div>

                <div>
                  <h4 className="font-medium mb-3">ASCII Strings ({result.strings.ascii.length})</h4>
                  <div className="bg-muted/20 rounded-lg p-3 max-h-64 overflow-auto">
                    <div className="space-y-1 font-mono text-xs">
                      {result.strings.ascii.slice(0, 100).map((str, index) => (
                        <div key={index} className="break-all">{str}</div>
                      ))}
                    </div>
                  </div>
                </div>

                <div>
                  <h4 className="font-medium mb-3">Unicode Strings ({result.strings.unicode.length})</h4>
                  <div className="bg-muted/20 rounded-lg p-3 max-h-64 overflow-auto">
                    <div className="space-y-1 font-mono text-xs">
                      {result.strings.unicode.slice(0, 100).map((str, index) => (
                        <div key={index} className="break-all">{str}</div>
                      ))}
                    </div>
                  </div>
                </div>
              </TabsContent>

              {/* Indicators Tab */}
              <TabsContent value="indicators" className="p-6 space-y-4">
                <div>
                  <h4 className="font-medium mb-3">All Suspicious Indicators</h4>
                  <div className="space-y-2">
                    {result.indicators.suspicious.map((indicator, index) => (
                      <div key={index} className={`border rounded-lg p-3 ${getSeverityColor(indicator.severity)}`}>
                        <div className="flex items-center justify-between mb-1">
                          <span className="font-medium">{indicator.indicator}</span>
                          <span className="text-xs uppercase">{indicator.severity}</span>
                        </div>
                        <div className="text-xs opacity-80">{indicator.category}</div>
                        <div className="text-xs mt-1">{indicator.description}</div>
                      </div>
                    ))}
                  </div>
                </div>

                {result.indicators.packing.isPacked && (
                  <div>
                    <h4 className="font-medium mb-3 text-orange-400">Packing Detected</h4>
                    <div className="bg-orange-400/10 border border-orange-400/30 rounded-lg p-4">
                      {result.indicators.packing.packers.length > 0 && (
                        <div className="mb-2">
                          <span className="font-semibold">Detected Packers:</span> {result.indicators.packing.packers.join(', ')}
                        </div>
                      )}
                      <div>
                        <span className="font-semibold">Evidence:</span>
                        <ul className="list-disc list-inside text-sm mt-1">
                          {result.indicators.packing.evidence.map((evidence, index) => (
                            <li key={index}>{evidence}</li>
                          ))}
                        </ul>
                      </div>
                    </div>
                  </div>
                )}

                {result.indicators.antiDebug.length > 0 && (
                  <div>
                    <h4 className="font-medium mb-3 text-red-400">Anti-Debugging Techniques</h4>
                    <div className="flex flex-wrap gap-2">
                      {result.indicators.antiDebug.map((technique, index) => (
                        <span key={index} className="px-3 py-1 bg-red-400/10 text-red-400 border border-red-400/30 rounded text-sm">
                          {technique}
                        </span>
                      ))}
                    </div>
                  </div>
                )}

                {result.indicators.antiVM.length > 0 && (
                  <div>
                    <h4 className="font-medium mb-3 text-yellow-400">Anti-VM Techniques</h4>
                    <div className="flex flex-wrap gap-2">
                      {result.indicators.antiVM.map((technique, index) => (
                        <span key={index} className="px-3 py-1 bg-yellow-400/10 text-yellow-400 border border-yellow-400/30 rounded text-sm">
                          {technique}
                        </span>
                      ))}
                    </div>
                  </div>
                )}
              </TabsContent>

              {/* Artifacts Tab */}
              <TabsContent value="artifacts" className="p-6 space-y-4">
                {result.artifacts.urls.length > 0 && (
                  <div>
                    <h4 className="font-medium mb-3">URLs ({result.artifacts.urls.length})</h4>
                    <div className="bg-muted/20 rounded-lg p-3 max-h-48 overflow-auto">
                      <div className="space-y-1 font-mono text-xs">
                        {result.artifacts.urls.map((url, index) => (
                          <div key={index} className="break-all">{url}</div>
                        ))}
                      </div>
                    </div>
                  </div>
                )}

                {result.artifacts.ips.length > 0 && (
                  <div>
                    <h4 className="font-medium mb-3">IP Addresses ({result.artifacts.ips.length})</h4>
                    <div className="flex flex-wrap gap-2">
                      {result.artifacts.ips.map((ip, index) => (
                        <span key={index} className="px-3 py-1 bg-blue-400/10 text-blue-400 border border-blue-400/30 rounded font-mono text-sm">
                          {ip}
                        </span>
                      ))}
                    </div>
                  </div>
                )}

                {result.artifacts.domains.length > 0 && (
                  <div>
                    <h4 className="font-medium mb-3">Domains ({result.artifacts.domains.length})</h4>
                    <div className="bg-muted/20 rounded-lg p-3 max-h-48 overflow-auto">
                      <div className="space-y-1 font-mono text-xs">
                        {result.artifacts.domains.map((domain, index) => (
                          <div key={index} className="break-all">{domain}</div>
                        ))}
                      </div>
                    </div>
                  </div>
                )}

                {result.artifacts.emails.length > 0 && (
                  <div>
                    <h4 className="font-medium mb-3">Email Addresses ({result.artifacts.emails.length})</h4>
                    <div className="flex flex-wrap gap-2">
                      {result.artifacts.emails.map((email, index) => (
                        <span key={index} className="px-3 py-1 bg-green-400/10 text-green-400 border border-green-400/30 rounded font-mono text-sm">
                          {email}
                        </span>
                      ))}
                    </div>
                  </div>
                )}

                {result.artifacts.registryKeys.length > 0 && (
                  <div>
                    <h4 className="font-medium mb-3">Registry Keys ({result.artifacts.registryKeys.length})</h4>
                    <div className="bg-muted/20 rounded-lg p-3 max-h-48 overflow-auto">
                      <div className="space-y-1 font-mono text-xs">
                        {result.artifacts.registryKeys.map((key, index) => (
                          <div key={index} className="break-all">{key}</div>
                        ))}
                      </div>
                    </div>
                  </div>
                )}

                {result.artifacts.filePaths.length > 0 && (
                  <div>
                    <h4 className="font-medium mb-3">File Paths ({result.artifacts.filePaths.length})</h4>
                    <div className="bg-muted/20 rounded-lg p-3 max-h-48 overflow-auto">
                      <div className="space-y-1 font-mono text-xs">
                        {result.artifacts.filePaths.map((path, index) => (
                          <div key={index} className="break-all">{path}</div>
                        ))}
                      </div>
                    </div>
                  </div>
                )}
              </TabsContent>
            </Tabs>
          </Card>
        </>
      )}
    </div>
  )
}

export default MalwareAnalysis
